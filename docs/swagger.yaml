definitions:
  reqdto.CreateUserReq:
    properties:
      account:
        example: jeff7777
        maxLength: 20
        minLength: 8
        type: string
      email:
        example: jeff@gmail.com
        type: string
      password:
        example: password
        maxLength: 20
        minLength: 8
        type: string
      phone:
        example: "+886955555555"
        type: string
      userName:
        description: 使用者名稱
        example: Jeff
        maxLength: 20
        minLength: 4
        type: string
    required:
    - account
    - email
    - password
    - phone
    - userName
    type: object
  reqdto.LoginReq:
    properties:
      account:
        example: jeff7777
        type: string
      email:
        example: jeff@gmail.com
        type: string
      password:
        example: password
        maxLength: 20
        minLength: 8
        type: string
    required:
    - password
    type: object
  reqdto.PatchUserReq:
    properties:
      account:
        example: jeff7777
        type: string
      email:
        example: jeff@gmail.com
        type: string
      password:
        example: jeffpwd
        type: string
      phone:
        example: "+886955555555"
        type: string
      userName:
        example: Jeff
        type: string
    type: object
  reqdto.PutUserReq:
    properties:
      account:
        example: jeff7777
        type: string
      email:
        example: jeff@gmail.com
        type: string
      password:
        example: jeffpwd
        type: string
      phone:
        example: "+886955555555"
        type: string
      userName:
        example: Jeff
        type: string
    type: object
  respdto.ApiErrorResp:
    properties:
      detail:
        description: 問題描述
        type: string
      title:
        description: |-
          Type     string `json:"type,omitempty"`
          Status   int    `json:"status,omitempty"`   // http status
        type: string
    type: object
  respdto.CreateUserResp:
    properties:
      account:
        type: string
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      userName:
        type: string
    type: object
  respdto.LoginResp:
    properties:
      exp:
        example: 1719218836
        type: integer
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiamVmZjc3NzciLCJlbWFpbCI6ImplZmZAZ21haWwuY29tIiwiZXhwIjoxNzE5MjE4ODM2LCJpZCI6ImZhNzkxODE2LWRkMzUtNDJlNi1hNDc1LTAwZjg3ZDRhYzlhYSIsInBob25lIjoiKzg4Njk1NTU1NTU1NSIsInVzZXJOYW1lIjoiSmVmZiJ9.ALccbWnDW4Tg6NvIS8aCw3B96okQ3gLVqiEz3Ukq_eA
        type: string
    type: object
info:
  contact: {}
  description: User Service API
  title: User Service API
  version: "1.0"
paths:
  /helloworld:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: HelloWorld example
      tags:
      - Example
  /login:
    post:
      parameters:
      - description: Login sample , account 和 email 需擇一輸入
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/reqdto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: 返回token訊息
          schema:
            $ref: '#/definitions/respdto.LoginResp'
        default:
          description: error response
          schema:
            $ref: '#/definitions/respdto.ApiErrorResp'
      summary: 登入
      tags:
      - User
  /ping:
    get:
      consumes:
      - application/json
      description: 確認服務正常
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
        default:
          description: error response
          schema:
            $ref: '#/definitions/respdto.ApiErrorResp'
      summary: Ping Server
      tags:
      - Example
  /user:
    post:
      parameters:
      - description: Create user sample
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/reqdto.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: 返回創建用戶訊息
          schema:
            $ref: '#/definitions/respdto.CreateUserResp'
        default:
          description: error response
          schema:
            $ref: '#/definitions/respdto.ApiErrorResp'
      summary: 建立用戶
      tags:
      - User
  /user/{userId}:
    delete:
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok" "返回用户信息
          schema:
            type: string
        "400":
          description: err_code：10002 参数错误； err_code：10003 校验错误
          schema:
            type: string
        "401":
          description: err_code：10001 登录失败
          schema:
            type: string
      summary: 刪除用戶 by Id
      tags:
      - User
    get:
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok" "返回用户信息
          schema:
            type: string
        "400":
          description: err_code：10002 参数错误； err_code：10003 校验错误
          schema:
            type: string
        "401":
          description: err_code：10001 登录失败
          schema:
            type: string
      summary: 查詢用戶 by Id
      tags:
      - User
    patch:
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      - description: Patch user sample
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/reqdto.PatchUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: ok" "返回用户信息
          schema:
            type: string
        "400":
          description: err_code：10002 参数错误； err_code：10003 校验错误
          schema:
            type: string
        "401":
          description: err_code：10001 登录失败
          schema:
            type: string
      summary: 部分更新用戶 by Id
      tags:
      - User
    put:
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      - description: Put user sample
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/reqdto.PutUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: ok" "返回用户信息
          schema:
            type: string
        "400":
          description: err_code：10002 参数错误； err_code：10003 校验错误
          schema:
            type: string
        "401":
          description: err_code：10001 登录失败
          schema:
            type: string
      summary: 完整更新用戶 by Id
      tags:
      - User
  /users:
    get:
      parameters:
      - description: User Name
        in: query
        name: userName
        type: string
      - description: User Email
        in: query
        name: email
        type: string
      - description: User Phone
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok" "返回用户信息
          schema:
            type: string
        "400":
          description: err_code：10002 参数错误； err_code：10003 校验错误
          schema:
            type: string
        "401":
          description: err_code：10001 登录失败
          schema:
            type: string
      summary: 查詢用戶
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User API
  name: User
- description: Example API
  name: Example
- description: Other description
  name: Other

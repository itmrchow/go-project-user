// Code generated by mockery v2.43.2. DO NOT EDIT.

package repo

import (
	domain "itmrchow/go-project/user/src/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repo "itmrchow/go-project/user/src/usecase/repo"
)

// MockWalletRecordRepo is an autogenerated mock type for the WalletRecordRepo type
type MockWalletRecordRepo struct {
	mock.Mock
}

type MockWalletRecordRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletRecordRepo) EXPECT() *MockWalletRecordRepo_Expecter {
	return &MockWalletRecordRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: wallet
func (_m *MockWalletRecordRepo) Create(wallet *domain.WalletRecord) error {
	ret := _m.Called(wallet)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.WalletRecord) error); ok {
		r0 = rf(wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRecordRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWalletRecordRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - wallet *domain.WalletRecord
func (_e *MockWalletRecordRepo_Expecter) Create(wallet interface{}) *MockWalletRecordRepo_Create_Call {
	return &MockWalletRecordRepo_Create_Call{Call: _e.mock.On("Create", wallet)}
}

func (_c *MockWalletRecordRepo_Create_Call) Run(run func(wallet *domain.WalletRecord)) *MockWalletRecordRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.WalletRecord))
	})
	return _c
}

func (_c *MockWalletRecordRepo_Create_Call) Return(_a0 error) *MockWalletRecordRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRecordRepo_Create_Call) RunAndReturn(run func(*domain.WalletRecord) error) *MockWalletRecordRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockWalletRecordRepo) Get(id uint) (*domain.WalletRecord, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.WalletRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.WalletRecord, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.WalletRecord); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WalletRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRecordRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWalletRecordRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint
func (_e *MockWalletRecordRepo_Expecter) Get(id interface{}) *MockWalletRecordRepo_Get_Call {
	return &MockWalletRecordRepo_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockWalletRecordRepo_Get_Call) Run(run func(id uint)) *MockWalletRecordRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockWalletRecordRepo_Get_Call) Return(_a0 *domain.WalletRecord, _a1 error) *MockWalletRecordRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRecordRepo_Get_Call) RunAndReturn(run func(uint) (*domain.WalletRecord, error)) *MockWalletRecordRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields:
func (_m *MockWalletRecordRepo) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRecordRepo_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockWalletRecordRepo_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *MockWalletRecordRepo_Expecter) Migrate() *MockWalletRecordRepo_Migrate_Call {
	return &MockWalletRecordRepo_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *MockWalletRecordRepo_Migrate_Call) Run(run func()) *MockWalletRecordRepo_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWalletRecordRepo_Migrate_Call) Return(_a0 error) *MockWalletRecordRepo_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRecordRepo_Migrate_Call) RunAndReturn(run func() error) *MockWalletRecordRepo_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// WithTrx provides a mock function with given fields: _a0
func (_m *MockWalletRecordRepo) WithTrx(_a0 *gorm.DB) repo.WalletRecordRepo {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithTrx")
	}

	var r0 repo.WalletRecordRepo
	if rf, ok := ret.Get(0).(func(*gorm.DB) repo.WalletRecordRepo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.WalletRecordRepo)
		}
	}

	return r0
}

// MockWalletRecordRepo_WithTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTrx'
type MockWalletRecordRepo_WithTrx_Call struct {
	*mock.Call
}

// WithTrx is a helper method to define mock.On call
//   - _a0 *gorm.DB
func (_e *MockWalletRecordRepo_Expecter) WithTrx(_a0 interface{}) *MockWalletRecordRepo_WithTrx_Call {
	return &MockWalletRecordRepo_WithTrx_Call{Call: _e.mock.On("WithTrx", _a0)}
}

func (_c *MockWalletRecordRepo_WithTrx_Call) Run(run func(_a0 *gorm.DB)) *MockWalletRecordRepo_WithTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *MockWalletRecordRepo_WithTrx_Call) Return(_a0 repo.WalletRecordRepo) *MockWalletRecordRepo_WithTrx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRecordRepo_WithTrx_Call) RunAndReturn(run func(*gorm.DB) repo.WalletRecordRepo) *MockWalletRecordRepo_WithTrx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletRecordRepo creates a new instance of MockWalletRecordRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletRecordRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletRecordRepo {
	mock := &MockWalletRecordRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
